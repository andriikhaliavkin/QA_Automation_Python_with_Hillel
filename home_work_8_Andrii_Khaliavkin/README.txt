там, де явно прописані назви функцій та файлів - робіть у відповідності до ТЗ, в інших випадках помізкуйте щодо назв.
в функціях проставляйте аннотацію типів аргументів та повертаємого значення, докстрінги, якщо функціонал коду функції
зрозумілий з її назви - не потрібні


створити файл library.py
в ньому написати функції
----написати функцію, яка отримує ціле число і повертає слово "копійка" у вірній формі: 1 -- копійка, 2 -- копійки, 25 -- копійок
----написати функцію, яка отримує ціле число і повертає слово "гривня" у вірній формі: 1 -- гривня, 2 -- гривні, 25 -- гривень
----функцію, яка приймає число і повертає список, в якому перший елемент - стрічка з цілою частиною числа + слово 'гривня'
у вірному відмінку, другий елемент - стрічка з мантісою (значення після коми), + слово 'копійка' у вірній формі.
наприклад - 1 -- ['1 гривня', "0 копійок"]; 10.1 -- ['10 гривень', "10 копійок"]; 2.01 -- ['2 гривні', "1 копійка"].
в даній функції для створення форм слів гривня та копійка використати результат роботи функцій, описаних вище.
Зауваження - якщо буде передано число з дрібною частиною більш ніж 2 знаки, то вони не мають оброблятися
(логіку, що робити з 125.339 залишаю на вас - чи округляйте, чи відкидайте - і це рішення пропишіть в докстрінгі)
----напишіть функцію is_hot_today, яка отримує параметр температури (число, за замовчуванням 30), і в залежності від
величини повідомляє, чи сьогодні жарко, чи холодно (більше 25 - жарко, інакше холодно).
перевірку на -155555555555 градусів чи +555555555555 не проводимо, просто відштовхуємося від отриманого значення.
подумайте, який тип даних має повертати функція
----створіть функцію, яка отримує від користувача число і повертає його як число. проте!!! якщо користувач ввів не вірні дані,
які не можна конвертувати в число ("шість"), заставте користувача ввести валідні дані (цикли вам в допомогу).
результатом в будь-якому випадку має бути число. зауважте - функція має прийняти один не обовязковий стрічковий аргумент
 - месседж, за замовчуванням - "Введіть число"


створіть файл main.py, в який імпортуйте функціонал library, в даному файлі створіть функцію, яка отримає від
користувача суму для внесення на депозит (тут використаємо функціонал library, і ми маємо передати свій месседж
для функції вводу користувача), та роздрукує в консоль стрічку, типу: надана вами сума: 5 гривень 26 копійок

запустіть дану керуючу функцію-агрегатор

тут же ви можете (не обовязково, проте плюс в карму) використати if __name__ == "__main__":



створіть файл з тестами, протестуйте всі функції з library (окрім функції з вводом користувача).
перевіряйте на очікуваний результат та на очікуваний тип даних.